////////////////////////////////////////
// lerp.comp
// Trilinear Interpolation for CLAHE
////////////////////////////////////////

#version 430

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;	// 64 threads

// input Dicom volume
layout(r16ui, binding = 0) uniform uimage3D volume;

// input LUT
layout(std430, binding = 1) buffer lutBuffer {
    uint LUT[];
};
// input Histogram
layout(std430, binding = 2) buffer inHist {
    uint hist[];
};

// output Volume Data
layout(r32ui, binding = 3) uniform uimage3D newVolume;
//layout(std430, binding = 3) buffer newVolumeBuffer{
//	uint newVolume[];
//};
// TESTING
layout(std430, binding = 4) buffer testBuffer{
	uint test[];
};


uniform ivec3 numSB;	// number of Sub Blocks
uniform uint NUM_BINS;


void main() {

	// figure out which block this voxel belongs to
	uvec3 index = gl_GlobalInvocationID.xyz;
	ivec3 volumeDims = imageSize(volume);

	// number of blocks to interpolate over is 2x number of SB the volume is divided into
	ivec3 numBlocks = numSB * ivec3(2);	
	ivec3 sizeBlock = ivec3( volumeDims / numBlocks );
	ivec3 currBlock = ivec3( index / sizeBlock );
	

	// find the neighbooring subBlocks and interpolation values (a,b,c) for the 
	// block we are interpolating over
	uint xRight, xLeft, yUp, yDown, zFront, zBack;
	uint a, aInv, b, bInv, c, cInv;

	////////////////////////////////////////////////////////////////////////////
	// X neighboors
	if (currBlock.x == 0) {
		xLeft = 0;							xRight = 0;
	}
	else if (currBlock.x == numBlocks.x - 1) {
		xLeft = currBlock.x / 2 ;			xRight = xLeft;
	}
	else {
		if (currBlock.x % 2 == 0)	{
			xLeft = currBlock.x / 2 - 1;	xRight = xLeft + 1;
		}
		else {
			xLeft = currBlock.x / 2;		xRight = xLeft + 1;
		}
	}
	// X interpolation coefficients 
	a = index.x - currBlock.x * sizeBlock.x;
	aInv = sizeBlock.x - a;

	////////////////////////////////////////////////////////////////////////////
	// Y neighboors
	if (currBlock.y == 0) {
		yUp = 0;							yDown = 0;
	}
	else if (currBlock.y == numBlocks.y - 1) {
		yUp = currBlock.y / 2;				yDown = yUp;
	}
	else {
		if (currBlock.y % 2 == 0) {
			yUp = currBlock.y / 2 - 1;		yDown = yUp + 1;
		}
		else {
			yUp = currBlock.y / 2;			yDown = yUp + 1;
		}
	}
	// Y interpolation coefficients 
	b = index.y - currBlock.y * sizeBlock.y;
	bInv = sizeBlock.y - b;

	////////////////////////////////////////////////////////////////////////////
	// Z neighboors
	if (currBlock.z == 0) {
		zFront = 0;							zBack = 0;
	}
	else if (currBlock.z == numBlocks.z - 1) {
		zFront = currBlock.z / 2;			zBack = zFront;
	}
	else {
		if (currBlock.z % 2 == 0) {
			zFront = currBlock.z / 2 - 1;	zBack = zFront + 1;
		}
		else {
			zFront = currBlock.z / 2;		zBack = zFront + 1;
		}
	}
	// Z interpolation coefficients 
	c = index.z - currBlock.z * sizeBlock.z;
	cInv = sizeBlock.z - c;
	
	////////////////////////////////////////////////////////////////////////////
	// get the histogram indices for the neighbooring subblocks 
	uint LUF = NUM_BINS * (zFront * numSB.x * numSB.y + yUp   * numSB.x + xLeft  );
	uint RUF = NUM_BINS * (zFront * numSB.x * numSB.y + yUp   * numSB.x + xRight );
	uint LDF = NUM_BINS * (zFront * numSB.x * numSB.y + yDown * numSB.x + xLeft  );
	uint RDF = NUM_BINS * (zFront * numSB.x * numSB.y + yDown * numSB.x + xRight );

	uint LUB = NUM_BINS * (zBack * numSB.x * numSB.y + yUp   * numSB.x + xLeft   );
	uint RUB = NUM_BINS * (zBack * numSB.x * numSB.y + yUp   * numSB.x + xRight  );
	uint LDB = NUM_BINS * (zBack * numSB.x * numSB.y + yDown * numSB.x + xLeft   );
	uint RDB = NUM_BINS * (zBack * numSB.x * numSB.y + yDown * numSB.x + xRight  );


	////////////////////////////////////////////////////////////////////////////
	// LERP

	// get the current gray value 
//	uint greyValue = LUT [ imageLoad(volume, ivec3(index)).x ];
	uint greyValue = imageLoad(volume, ivec3(index)).x;

	// bilinear interpolation - zFront
	float p1_front = aInv * float(hist[LUF + greyValue]) / float(NUM_BINS) + a * float(hist[RUF + greyValue]) / float(NUM_BINS);
	float p2_front = aInv * float(hist[LDF + greyValue]) / float(NUM_BINS) + a * float(hist[RDF + greyValue]) / float(NUM_BINS);
	float q_front  = bInv * p1_front + b * p2_front;

	// bilinear interpolation - zBack
	float p1_back = aInv * float(hist[LUB + greyValue]) / float(NUM_BINS) + a * float(hist[RUB + greyValue]) / float(NUM_BINS);
	float p2_back = aInv * float(hist[LDB + greyValue]) / float(NUM_BINS) + a * float(hist[RDB + greyValue]) / float(NUM_BINS);
	float q_back  = bInv * p1_back + b * p2_back;
	
	// bilinear interpolation - zFront
//	float p1_front = aInv * float(hist[LUF + greyValue]) + a * float(hist[RUF + greyValue]);
//	float p2_front = aInv * float(hist[LDF + greyValue]) + a * float(hist[RDF + greyValue]);
//	float q_front  = bInv * p1_front + b * p2_front;
//
//	// bilinear interpolation - zBack
//	float p1_back = aInv * float(hist[LUB + greyValue]) + a * float(hist[RUB + greyValue]);
//	float p2_back = aInv * float(hist[LDB + greyValue]) + a * float(hist[RDB + greyValue]);
//	float q_back  = bInv * p1_back + b * p2_back;

	// trilinear interpolation
	float normFactor = float(sizeBlock.x) * float(sizeBlock.y) * float(sizeBlock.z);
	float ans = (cInv * q_front + c * q_back) / normFactor;

	// store new value back into the volume texture 

//	newVolume[index.z * volumeDims.x * volumeDims.y + index.y * volumeDims.x + index.x] = uint(ans * NUM_BINS);
//	uvec4 newGrayVal = uvec4(uint(ans * NUM_BINS), 0, 0, 0);
//	vec4 newGrayVal = vec4(ans, 0, 0, 0);
	uvec4 newGrayVal = uvec4(greyValue, 0, 0, 0);
	imageStore(newVolume, ivec3(index), newGrayVal);
//	newVolume[index.z * volumeDims.x * volumeDims.y + index.y * volumeDims.x + index.x] = greyValue;
//	newVolume[index.z * volumeDims.x * volumeDims.y + index.y * volumeDims.x + index.x] = uint(ans * NUM_BINS);

	// TESTING
//	test[index.z * volumeDims.x * volumeDims.y + index.y * volumeDims.x + index.x] = greyValue;
//	test[index.z * sizeBlock.x * sizeBlock.y + index.y * sizeBlock.x + index.x] = a;
//	if (index.y == 0 && index.z == 0) {
//		test[index.x] = uint(ans * NUM_BINS);
//	}
}