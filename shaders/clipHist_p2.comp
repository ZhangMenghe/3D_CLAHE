////////////////////////////////////////
// clipHist.comp
// Pass 2 of redistributing the excess pixels above the clipLimit for CLAHE
////////////////////////////////////////

#version 430

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;	// 64 threads

// input Histogram
layout(std430, binding = 0) buffer inHist {
    uint hist[];
};
// input Histogram Max Values 
layout(std430, binding = 1) buffer inHistMax {
    uint histMax[];
};
// input the amount of excess pixels 
layout (std430, binding = 2) buffer excessPixels {
    uint excess[];
};
// input the amount of excess pixels 
layout (std430, binding = 3) buffer stepSizeBuffer {
    uint stepSizes[];
};
layout (std430, binding = 4) buffer M {
    uint mutex;
};
layout (std430, binding = 5) buffer theadBuffer {
    uint thread[];
};

uniform uint NUM_BINS;      // number of gray values in the Volume 
uniform float clipLimit;	// limit of pixel values


void main() {

    // figure out the sub block this index belongs to 
	uint index = gl_GlobalInvocationID.x;
    uint histIndex = index / NUM_BINS;

    // Pass 2 of redistributing the excess pixels 
//    uint stepSize =  max(NUM_BINS / excess[ histIndex ], 1);   
    uint stepSize =  stepSizes[ histIndex ]; 
    uint clipValue = uint( float( histMax[ histIndex ] ) * clipLimit );
    
    memoryBarrier();
//    excess[ histIndex] = stepSize;

    // get 0...NUM_BINS index
    uint currHistIndex = index % NUM_BINS;

    // add excess to the histogram
    if (currHistIndex % stepSize == 0) {
        int count = 0;
        while (atomicCompSwap(mutex, uint(0), uint(1)) != 0) {
            // wait
            count ++;
            if (count > 100){
                uint idx = atomicAdd(thread[0], 1);
                thread[(idx + 1) % 511 + 1] = index;
                return;
            }
        }
        if (hist[index] < clipValue && excess[histIndex] > 0) {
            uint x = atomicMin( excess[ histIndex ], excess[histIndex] - 1);
		    atomicAdd( hist[ index ], x == 0 ? 0 : 1);
        }
        atomicExchange(mutex, uint(0));
    }

//    if (currHistIndex == 0) { 
//        uint temp = NUM_BINS / stepSize;
//        temp = ~temp + 1;
//        atomicAdd( excess[histIndex], -1 );
//    }
}